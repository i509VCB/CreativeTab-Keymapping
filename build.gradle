import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'java'
	id 'checkstyle'
	id 'maven-publish'
	id 'com.jfrog.bintray' version "$bintray"
	id 'net.minecrell.licenser' version "$licenser"
	id 'fabric-loom' version "$fabric_loom"
}

apply from: "dependencies.gradle"

logger.lifecycle("""
	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	Building $project.mod_name
	Version: $project.mod_version
	Minecraft Version: $project.minecraft
	Fabric-Loader Version: $project.fabric_loader
	
	Output files will be in /build/libs
	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
""")

repositories {
	mavenCentral()
	jcenter()
	maven { url  "https://dl.bintray.com/i509vcb/maven" }
}

dependencies {
	minecraft fabric.minecraft
	mappings fabric.yarn
	modApi fabric.fabric_loader

	modApi required.fabric_api

	implementation libs.checker_qual

	modImplementation(optional.modmenu){transitive = false}
	modImplementation(optional.rei){exclude group: "net.fabricmc.fabric-api"}
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand (
				"mod_id": project.mod_id,
				"mod_name": project.mod_name,
				"mod_version": project.mod_version,
				"description": project.description,
				"license": project.license,
				"repo_owner": project.repo_owner,
				"repo_name": project.repo_name
		)
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// Licenser
license {
	header = file('LICENSE_HEADER')
	include '**/*.java'
	style.java = 'BLOCK_COMMENT'
	ext {
		name = 'i509VCB<git@i509.me>'
	}
}

// Checkstyle
checkstyle {
	configFile = rootProject.file("checkstyle.xml")
	toolVersion = '8.25'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version// + "+" + project.minecraft
group = project.maven_group

//Publishing details
if (rootProject.file("private.gradle").exists()) {
	apply from: "private.gradle"
} else {
	logger.lifecycle("Publishing details missing from \"private.gradle\"")
}

afterEvaluate {
	artifacts {
		archives remapJar
		archives(sourcesJar) {
			classifier = "sources"
			builtBy remapSourcesJar
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintrayUser')
	key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintrayKey')
	publications = ["mavenJava"]
	publish = true
	override = true

	pkg {
		repo = project.bintray_repo
		name = project.name
		userOrg = project.repo_owner
		licenses = [project.license]
		vcsUrl = "https://github.com/$project.repo_owner/$project.repo_name"
		version {
			name = project.version
			released = new Date()
			vcsTag = project.version
		}

		publicDownloadNumbers = true
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				groupId project.maven_group
				artifactId project.archives_base_name
				version project.version

				artifact(remapJar) {
					builtBy remapJar
				}
				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}
	}

	repositories {
		//mavenLocal()
	}
}
